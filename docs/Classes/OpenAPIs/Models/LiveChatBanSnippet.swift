//
// LiveChatBanSnippet.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct LiveChatBanSnippet: Codable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case livechatbantypeunspecified = "liveChatBanTypeUnspecified"
        case permanent = "permanent"
        case temporary = "temporary"
    }
    /** The duration of a ban, only filled if the ban has type TEMPORARY. */
    public var banDurationSeconds: String?
    public var bannedUserDetails: ChannelProfileDetails?
    /** The chat this ban is pertinent to. */
    public var liveChatId: String?
    /** The type of ban. */
    public var type: ModelType?

    public init(banDurationSeconds: String? = nil, bannedUserDetails: ChannelProfileDetails? = nil, liveChatId: String? = nil, type: ModelType? = nil) {
        self.banDurationSeconds = banDurationSeconds
        self.bannedUserDetails = bannedUserDetails
        self.liveChatId = liveChatId
        self.type = type
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case banDurationSeconds
        case bannedUserDetails
        case liveChatId
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(banDurationSeconds, forKey: .banDurationSeconds)
        try container.encodeIfPresent(bannedUserDetails, forKey: .bannedUserDetails)
        try container.encodeIfPresent(liveChatId, forKey: .liveChatId)
        try container.encodeIfPresent(type, forKey: .type)
    }



}
