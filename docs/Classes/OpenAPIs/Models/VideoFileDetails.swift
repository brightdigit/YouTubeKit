//
// VideoFileDetails.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

/** Describes original video file properties, including technical details about audio and video streams, but also metadata information like content length, digitization time, or geotagging information. */
public struct VideoFileDetails: Codable, Hashable {

    public enum FileType: String, Codable, CaseIterable {
        case video = "video"
        case audio = "audio"
        case image = "image"
        case archive = "archive"
        case document = "document"
        case project = "project"
        case other = "other"
    }
    /** A list of audio streams contained in the uploaded video file. Each item in the list contains detailed metadata about an audio stream. */
    public var audioStreams: [VideoFileDetailsAudioStream]?
    /** The uploaded video file&#39;s combined (video and audio) bitrate in bits per second. */
    public var bitrateBps: String?
    /** The uploaded video file&#39;s container format. */
    public var container: String?
    /** The date and time when the uploaded video file was created. The value is specified in ISO 8601 format. Currently, the following ISO 8601 formats are supported: - Date only: YYYY-MM-DD - Naive time: YYYY-MM-DDTHH:MM:SS - Time with timezone: YYYY-MM-DDTHH:MM:SS+HH:MM  */
    public var creationTime: String?
    /** The length of the uploaded video in milliseconds. */
    public var durationMs: String?
    /** The uploaded file&#39;s name. This field is present whether a video file or another type of file was uploaded. */
    public var fileName: String?
    /** The uploaded file&#39;s size in bytes. This field is present whether a video file or another type of file was uploaded. */
    public var fileSize: String?
    /** The uploaded file&#39;s type as detected by YouTube&#39;s video processing engine. Currently, YouTube only processes video files, but this field is present whether a video file or another type of file was uploaded. */
    public var fileType: FileType?
    /** A list of video streams contained in the uploaded video file. Each item in the list contains detailed metadata about a video stream. */
    public var videoStreams: [VideoFileDetailsVideoStream]?

    public init(audioStreams: [VideoFileDetailsAudioStream]? = nil, bitrateBps: String? = nil, container: String? = nil, creationTime: String? = nil, durationMs: String? = nil, fileName: String? = nil, fileSize: String? = nil, fileType: FileType? = nil, videoStreams: [VideoFileDetailsVideoStream]? = nil) {
        self.audioStreams = audioStreams
        self.bitrateBps = bitrateBps
        self.container = container
        self.creationTime = creationTime
        self.durationMs = durationMs
        self.fileName = fileName
        self.fileSize = fileSize
        self.fileType = fileType
        self.videoStreams = videoStreams
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case audioStreams
        case bitrateBps
        case container
        case creationTime
        case durationMs
        case fileName
        case fileSize
        case fileType
        case videoStreams
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(audioStreams, forKey: .audioStreams)
        try container.encodeIfPresent(bitrateBps, forKey: .bitrateBps)
        try container.encodeIfPresent(container, forKey: .container)
        try container.encodeIfPresent(creationTime, forKey: .creationTime)
        try container.encodeIfPresent(durationMs, forKey: .durationMs)
        try container.encodeIfPresent(fileName, forKey: .fileName)
        try container.encodeIfPresent(fileSize, forKey: .fileSize)
        try container.encodeIfPresent(fileType, forKey: .fileType)
        try container.encodeIfPresent(videoStreams, forKey: .videoStreams)
    }



}
