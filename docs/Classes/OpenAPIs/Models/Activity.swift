//
// Activity.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

/** An *activity* resource contains information about an action that a particular channel, or user, has taken on YouTube.The actions reported in activity feeds include rating a video, sharing a video, marking a video as a favorite, commenting on a video, uploading a video, and so forth. Each activity resource identifies the type of action, the channel associated with the action, and the resource(s) associated with the action, such as the video that was rated or uploaded. */
public struct Activity: Codable, Hashable {

    public var contentDetails: ActivityContentDetails?
    /** Etag of this resource */
    public var etag: String?
    /** The ID that YouTube uses to uniquely identify the activity. */
    public var id: String?
    /** Identifies what kind of resource this is. Value: the fixed string \&quot;youtube#activity\&quot;. */
    public var kind: String? = "youtube#activity"
    public var snippet: ActivitySnippet?

    public init(contentDetails: ActivityContentDetails? = nil, etag: String? = nil, id: String? = nil, kind: String? = "youtube#activity", snippet: ActivitySnippet? = nil) {
        self.contentDetails = contentDetails
        self.etag = etag
        self.id = id
        self.kind = kind
        self.snippet = snippet
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case contentDetails
        case etag
        case id
        case kind
        case snippet
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(contentDetails, forKey: .contentDetails)
        try container.encodeIfPresent(etag, forKey: .etag)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(kind, forKey: .kind)
        try container.encodeIfPresent(snippet, forKey: .snippet)
    }



}
