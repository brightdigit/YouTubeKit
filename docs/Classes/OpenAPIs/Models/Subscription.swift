//
// Subscription.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

/** A *subscription* resource contains information about a YouTube user subscription. A subscription notifies a user when new videos are added to a channel or when another user takes one of several actions on YouTube, such as uploading a video, rating a video, or commenting on a video. */
public struct Subscription: Codable, Hashable {

    public var contentDetails: SubscriptionContentDetails?
    /** Etag of this resource. */
    public var etag: String?
    /** The ID that YouTube uses to uniquely identify the subscription. */
    public var id: String?
    /** Identifies what kind of resource this is. Value: the fixed string \&quot;youtube#subscription\&quot;. */
    public var kind: String? = "youtube#subscription"
    public var snippet: SubscriptionSnippet?
    public var subscriberSnippet: SubscriptionSubscriberSnippet?

    public init(contentDetails: SubscriptionContentDetails? = nil, etag: String? = nil, id: String? = nil, kind: String? = "youtube#subscription", snippet: SubscriptionSnippet? = nil, subscriberSnippet: SubscriptionSubscriberSnippet? = nil) {
        self.contentDetails = contentDetails
        self.etag = etag
        self.id = id
        self.kind = kind
        self.snippet = snippet
        self.subscriberSnippet = subscriberSnippet
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case contentDetails
        case etag
        case id
        case kind
        case snippet
        case subscriberSnippet
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(contentDetails, forKey: .contentDetails)
        try container.encodeIfPresent(etag, forKey: .etag)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(kind, forKey: .kind)
        try container.encodeIfPresent(snippet, forKey: .snippet)
        try container.encodeIfPresent(subscriberSnippet, forKey: .subscriberSnippet)
    }



}
