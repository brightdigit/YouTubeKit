//
// SearchResultSnippet.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

/** Basic details about a search result, including title, description and thumbnails of the item referenced by the search result. */
public struct SearchResultSnippet: Codable, Hashable {

    public enum LiveBroadcastContent: String, Codable, CaseIterable {
        case _none = "none"
        case upcoming = "upcoming"
        case live = "live"
        case completed = "completed"
    }
    /** The value that YouTube uses to uniquely identify the channel that published the resource that the search result identifies. */
    public var channelId: String?
    /** The title of the channel that published the resource that the search result identifies. */
    public var channelTitle: String?
    /** A description of the search result. */
    public var description: String?
    /** It indicates if the resource (video or channel) has upcoming/active live broadcast content. Or it&#39;s \&quot;none\&quot; if there is not any upcoming/active live broadcasts. */
    public var liveBroadcastContent: LiveBroadcastContent?
    /** The creation date and time of the resource that the search result identifies. */
    public var publishedAt: Date?
    public var thumbnails: ThumbnailDetails?
    /** The title of the search result. */
    public var title: String?

    public init(channelId: String? = nil, channelTitle: String? = nil, description: String? = nil, liveBroadcastContent: LiveBroadcastContent? = nil, publishedAt: Date? = nil, thumbnails: ThumbnailDetails? = nil, title: String? = nil) {
        self.channelId = channelId
        self.channelTitle = channelTitle
        self.description = description
        self.liveBroadcastContent = liveBroadcastContent
        self.publishedAt = publishedAt
        self.thumbnails = thumbnails
        self.title = title
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case channelId
        case channelTitle
        case description
        case liveBroadcastContent
        case publishedAt
        case thumbnails
        case title
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(channelId, forKey: .channelId)
        try container.encodeIfPresent(channelTitle, forKey: .channelTitle)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(liveBroadcastContent, forKey: .liveBroadcastContent)
        try container.encodeIfPresent(publishedAt, forKey: .publishedAt)
        try container.encodeIfPresent(thumbnails, forKey: .thumbnails)
        try container.encodeIfPresent(title, forKey: .title)
    }



}
