//
// PlaylistItemContentDetails.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct PlaylistItemContentDetails: Codable, Hashable {

    /** The time, measured in seconds from the start of the video, when the video should stop playing. (The playlist owner can specify the times when the video should start and stop playing when the video is played in the context of the playlist.) By default, assume that the video.endTime is the end of the video. */
    public var endAt: String?
    /** A user-generated note for this item. */
    public var note: String?
    /** The time, measured in seconds from the start of the video, when the video should start playing. (The playlist owner can specify the times when the video should start and stop playing when the video is played in the context of the playlist.) The default value is 0. */
    public var startAt: String?
    /** The ID that YouTube uses to uniquely identify a video. To retrieve the video resource, set the id query parameter to this value in your API request. */
    public var videoId: String?
    /** The date and time that the video was published to YouTube. */
    public var videoPublishedAt: Date?

    public init(endAt: String? = nil, note: String? = nil, startAt: String? = nil, videoId: String? = nil, videoPublishedAt: Date? = nil) {
        self.endAt = endAt
        self.note = note
        self.startAt = startAt
        self.videoId = videoId
        self.videoPublishedAt = videoPublishedAt
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case endAt
        case note
        case startAt
        case videoId
        case videoPublishedAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(endAt, forKey: .endAt)
        try container.encodeIfPresent(note, forKey: .note)
        try container.encodeIfPresent(startAt, forKey: .startAt)
        try container.encodeIfPresent(videoId, forKey: .videoId)
        try container.encodeIfPresent(videoPublishedAt, forKey: .videoPublishedAt)
    }



}
