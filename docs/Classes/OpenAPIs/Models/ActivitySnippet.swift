//
// ActivitySnippet.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

/** Basic details about an activity, including title, description, thumbnails, activity type and group. Next ID: 12 */
public struct ActivitySnippet: Codable, Hashable {

    public enum ModelType: String, Codable, CaseIterable {
        case typeunspecified = "typeUnspecified"
        case upload = "upload"
        case like = "like"
        case favorite = "favorite"
        case comment = "comment"
        case subscription = "subscription"
        case playlistitem = "playlistItem"
        case recommendation = "recommendation"
        case bulletin = "bulletin"
        case social = "social"
        case channelitem = "channelItem"
        case promoteditem = "promotedItem"
    }
    /** The ID that YouTube uses to uniquely identify the channel associated with the activity. */
    public var channelId: String?
    /** Channel title for the channel responsible for this activity */
    public var channelTitle: String?
    /** The description of the resource primarily associated with the activity. @mutable youtube.activities.insert */
    public var description: String?
    /** The group ID associated with the activity. A group ID identifies user events that are associated with the same user and resource. For example, if a user rates a video and marks the same video as a favorite, the entries for those events would have the same group ID in the user&#39;s activity feed. In your user interface, you can avoid repetition by grouping events with the same groupId value. */
    public var groupId: String?
    /** The date and time that the video was uploaded. */
    public var publishedAt: Date?
    public var thumbnails: ThumbnailDetails?
    /** The title of the resource primarily associated with the activity. */
    public var title: String?
    /** The type of activity that the resource describes. */
    public var type: ModelType?

    public init(channelId: String? = nil, channelTitle: String? = nil, description: String? = nil, groupId: String? = nil, publishedAt: Date? = nil, thumbnails: ThumbnailDetails? = nil, title: String? = nil, type: ModelType? = nil) {
        self.channelId = channelId
        self.channelTitle = channelTitle
        self.description = description
        self.groupId = groupId
        self.publishedAt = publishedAt
        self.thumbnails = thumbnails
        self.title = title
        self.type = type
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case channelId
        case channelTitle
        case description
        case groupId
        case publishedAt
        case thumbnails
        case title
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(channelId, forKey: .channelId)
        try container.encodeIfPresent(channelTitle, forKey: .channelTitle)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(groupId, forKey: .groupId)
        try container.encodeIfPresent(publishedAt, forKey: .publishedAt)
        try container.encodeIfPresent(thumbnails, forKey: .thumbnails)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(type, forKey: .type)
    }



}
