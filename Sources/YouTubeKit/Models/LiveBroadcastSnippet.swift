//
// LiveBroadcastSnippet.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

/** Basic broadcast information. */
public struct LiveBroadcastSnippet: Codable, Hashable {

    /** The date and time that the broadcast actually ended. This information is only available once the broadcast&#39;s state is complete. */
    public var actualEndTime: Date?
    /** The date and time that the broadcast actually started. This information is only available once the broadcast&#39;s state is live. */
    public var actualStartTime: Date?
    /** The ID that YouTube uses to uniquely identify the channel that is publishing the broadcast. */
    public var channelId: String?
    /** The broadcast&#39;s description. As with the title, you can set this field by modifying the broadcast resource or by setting the description field of the corresponding video resource. */
    public var description: String?
    /** Indicates whether this broadcast is the default broadcast. Internal only. */
    public var isDefaultBroadcast: Bool?
    /** The id of the live chat for this broadcast. */
    public var liveChatId: String?
    /** The date and time that the broadcast was added to YouTube&#39;s live broadcast schedule. */
    public var publishedAt: Date?
    /** The date and time that the broadcast is scheduled to end. */
    public var scheduledEndTime: Date?
    /** The date and time that the broadcast is scheduled to start. */
    public var scheduledStartTime: Date?
    public var thumbnails: ThumbnailDetails?
    /** The broadcast&#39;s title. Note that the broadcast represents exactly one YouTube video. You can set this field by modifying the broadcast resource or by setting the title field of the corresponding video resource. */
    public var title: String?

    public init(actualEndTime: Date? = nil, actualStartTime: Date? = nil, channelId: String? = nil, description: String? = nil, isDefaultBroadcast: Bool? = nil, liveChatId: String? = nil, publishedAt: Date? = nil, scheduledEndTime: Date? = nil, scheduledStartTime: Date? = nil, thumbnails: ThumbnailDetails? = nil, title: String? = nil) {
        self.actualEndTime = actualEndTime
        self.actualStartTime = actualStartTime
        self.channelId = channelId
        self.description = description
        self.isDefaultBroadcast = isDefaultBroadcast
        self.liveChatId = liveChatId
        self.publishedAt = publishedAt
        self.scheduledEndTime = scheduledEndTime
        self.scheduledStartTime = scheduledStartTime
        self.thumbnails = thumbnails
        self.title = title
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case actualEndTime
        case actualStartTime
        case channelId
        case description
        case isDefaultBroadcast
        case liveChatId
        case publishedAt
        case scheduledEndTime
        case scheduledStartTime
        case thumbnails
        case title
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(actualEndTime, forKey: .actualEndTime)
        try container.encodeIfPresent(actualStartTime, forKey: .actualStartTime)
        try container.encodeIfPresent(channelId, forKey: .channelId)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(isDefaultBroadcast, forKey: .isDefaultBroadcast)
        try container.encodeIfPresent(liveChatId, forKey: .liveChatId)
        try container.encodeIfPresent(publishedAt, forKey: .publishedAt)
        try container.encodeIfPresent(scheduledEndTime, forKey: .scheduledEndTime)
        try container.encodeIfPresent(scheduledStartTime, forKey: .scheduledStartTime)
        try container.encodeIfPresent(thumbnails, forKey: .thumbnails)
        try container.encodeIfPresent(title, forKey: .title)
    }



}
