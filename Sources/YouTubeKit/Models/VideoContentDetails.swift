//
// VideoContentDetails.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

/** Details about the content of a YouTube Video. */
public struct VideoContentDetails: Codable, Hashable {

    public enum Caption: String, Codable, CaseIterable {
        case _true = "true"
        case _false = "false"
    }
    public enum Definition: String, Codable, CaseIterable {
        case sd = "sd"
        case hd = "hd"
    }
    public enum Projection: String, Codable, CaseIterable {
        case rectangular = "rectangular"
        case _360 = "360"
    }
    /** The value of captions indicates whether the video has captions or not. */
    public var caption: Caption?
    public var contentRating: ContentRating?
    public var countryRestriction: AccessPolicy?
    /** The value of definition indicates whether the video is available in high definition or only in standard definition. */
    public var definition: Definition?
    /** The value of dimension indicates whether the video is available in 3D or in 2D. */
    public var dimension: String?
    /** The length of the video. The tag value is an ISO 8601 duration in the format PT#M#S, in which the letters PT indicate that the value specifies a period of time, and the letters M and S refer to length in minutes and seconds, respectively. The # characters preceding the M and S letters are both integers that specify the number of minutes (or seconds) of the video. For example, a value of PT15M51S indicates that the video is 15 minutes and 51 seconds long. */
    public var duration: String?
    /** Indicates whether the video uploader has provided a custom thumbnail image for the video. This property is only visible to the video uploader. */
    public var hasCustomThumbnail: Bool?
    /** The value of is_license_content indicates whether the video is licensed content. */
    public var licensedContent: Bool?
    /** Specifies the projection format of the video. */
    public var projection: Projection?
    public var regionRestriction: VideoContentDetailsRegionRestriction?

    public init(caption: Caption? = nil, contentRating: ContentRating? = nil, countryRestriction: AccessPolicy? = nil, definition: Definition? = nil, dimension: String? = nil, duration: String? = nil, hasCustomThumbnail: Bool? = nil, licensedContent: Bool? = nil, projection: Projection? = nil, regionRestriction: VideoContentDetailsRegionRestriction? = nil) {
        self.caption = caption
        self.contentRating = contentRating
        self.countryRestriction = countryRestriction
        self.definition = definition
        self.dimension = dimension
        self.duration = duration
        self.hasCustomThumbnail = hasCustomThumbnail
        self.licensedContent = licensedContent
        self.projection = projection
        self.regionRestriction = regionRestriction
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case caption
        case contentRating
        case countryRestriction
        case definition
        case dimension
        case duration
        case hasCustomThumbnail
        case licensedContent
        case projection
        case regionRestriction
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(caption, forKey: .caption)
        try container.encodeIfPresent(contentRating, forKey: .contentRating)
        try container.encodeIfPresent(countryRestriction, forKey: .countryRestriction)
        try container.encodeIfPresent(definition, forKey: .definition)
        try container.encodeIfPresent(dimension, forKey: .dimension)
        try container.encodeIfPresent(duration, forKey: .duration)
        try container.encodeIfPresent(hasCustomThumbnail, forKey: .hasCustomThumbnail)
        try container.encodeIfPresent(licensedContent, forKey: .licensedContent)
        try container.encodeIfPresent(projection, forKey: .projection)
        try container.encodeIfPresent(regionRestriction, forKey: .regionRestriction)
    }



}
