//
// SuperChatEventSnippet.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct SuperChatEventSnippet: Codable, Hashable {

    /** The purchase amount, in micros of the purchase currency. e.g., 1 is represented as 1000000. */
    public var amountMicros: String?
    /** Channel id where the event occurred. */
    public var channelId: String?
    /** The text contents of the comment left by the user. */
    public var commentText: String?
    /** The date and time when the event occurred. */
    public var createdAt: Date?
    /** The currency in which the purchase was made. ISO 4217. */
    public var currency: String?
    /** A rendered string that displays the purchase amount and currency (e.g., \&quot;$1.00\&quot;). The string is rendered for the given language. */
    public var displayString: String?
    /** True if this event is a Super Sticker event. */
    public var isSuperStickerEvent: Bool?
    /** The tier for the paid message, which is based on the amount of money spent to purchase the message. */
    public var messageType: Int?
    public var superStickerMetadata: SuperStickerMetadata?
    public var supporterDetails: ChannelProfileDetails?

    public init(amountMicros: String? = nil, channelId: String? = nil, commentText: String? = nil, createdAt: Date? = nil, currency: String? = nil, displayString: String? = nil, isSuperStickerEvent: Bool? = nil, messageType: Int? = nil, superStickerMetadata: SuperStickerMetadata? = nil, supporterDetails: ChannelProfileDetails? = nil) {
        self.amountMicros = amountMicros
        self.channelId = channelId
        self.commentText = commentText
        self.createdAt = createdAt
        self.currency = currency
        self.displayString = displayString
        self.isSuperStickerEvent = isSuperStickerEvent
        self.messageType = messageType
        self.superStickerMetadata = superStickerMetadata
        self.supporterDetails = supporterDetails
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case amountMicros
        case channelId
        case commentText
        case createdAt
        case currency
        case displayString
        case isSuperStickerEvent
        case messageType
        case superStickerMetadata
        case supporterDetails
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(amountMicros, forKey: .amountMicros)
        try container.encodeIfPresent(channelId, forKey: .channelId)
        try container.encodeIfPresent(commentText, forKey: .commentText)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(currency, forKey: .currency)
        try container.encodeIfPresent(displayString, forKey: .displayString)
        try container.encodeIfPresent(isSuperStickerEvent, forKey: .isSuperStickerEvent)
        try container.encodeIfPresent(messageType, forKey: .messageType)
        try container.encodeIfPresent(superStickerMetadata, forKey: .superStickerMetadata)
        try container.encodeIfPresent(supporterDetails, forKey: .supporterDetails)
    }



}
