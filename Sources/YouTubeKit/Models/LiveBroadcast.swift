//
// LiveBroadcast.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

/** A *liveBroadcast* resource represents an event that will be streamed, via live video, on YouTube. */
public struct LiveBroadcast: Codable, Hashable {

    public var contentDetails: LiveBroadcastContentDetails?
    /** Etag of this resource. */
    public var etag: String?
    /** The ID that YouTube assigns to uniquely identify the broadcast. */
    public var id: String?
    /** Identifies what kind of resource this is. Value: the fixed string \&quot;youtube#liveBroadcast\&quot;. */
    public var kind: String? = "youtube#liveBroadcast"
    public var snippet: LiveBroadcastSnippet?
    public var statistics: LiveBroadcastStatistics?
    public var status: LiveBroadcastStatus?

    public init(contentDetails: LiveBroadcastContentDetails? = nil, etag: String? = nil, id: String? = nil, kind: String? = "youtube#liveBroadcast", snippet: LiveBroadcastSnippet? = nil, statistics: LiveBroadcastStatistics? = nil, status: LiveBroadcastStatus? = nil) {
        self.contentDetails = contentDetails
        self.etag = etag
        self.id = id
        self.kind = kind
        self.snippet = snippet
        self.statistics = statistics
        self.status = status
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case contentDetails
        case etag
        case id
        case kind
        case snippet
        case statistics
        case status
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(contentDetails, forKey: .contentDetails)
        try container.encodeIfPresent(etag, forKey: .etag)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(kind, forKey: .kind)
        try container.encodeIfPresent(snippet, forKey: .snippet)
        try container.encodeIfPresent(statistics, forKey: .statistics)
        try container.encodeIfPresent(status, forKey: .status)
    }



}
