//
// VideoSuggestions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

/** Specifies suggestions on how to improve video content, including encoding hints, tag suggestions, and editor suggestions. */
public struct VideoSuggestions: Codable, Hashable {

    public enum EditorSuggestions: String, Codable, CaseIterable {
        case videoautolevels = "videoAutoLevels"
        case videostabilize = "videoStabilize"
        case videocrop = "videoCrop"
        case audioquietaudioswap = "audioQuietAudioSwap"
    }
    public enum ProcessingErrors: String, Codable, CaseIterable {
        case audiofile = "audioFile"
        case imagefile = "imageFile"
        case projectfile = "projectFile"
        case notavideofile = "notAVideoFile"
        case docfile = "docFile"
        case archivefile = "archiveFile"
        case unsupportedspatialaudiolayout = "unsupportedSpatialAudioLayout"
    }
    public enum ProcessingHints: String, Codable, CaseIterable {
        case nonstreamablemov = "nonStreamableMov"
        case sendbestqualityvideo = "sendBestQualityVideo"
        case sphericalvideo = "sphericalVideo"
        case spatialaudio = "spatialAudio"
        case vrvideo = "vrVideo"
        case hdrvideo = "hdrVideo"
    }
    public enum ProcessingWarnings: String, Codable, CaseIterable {
        case unknowncontainer = "unknownContainer"
        case unknownvideocodec = "unknownVideoCodec"
        case unknownaudiocodec = "unknownAudioCodec"
        case inconsistentresolution = "inconsistentResolution"
        case haseditlist = "hasEditlist"
        case problematicvideocodec = "problematicVideoCodec"
        case problematicaudiocodec = "problematicAudioCodec"
        case unsupportedvrstereomode = "unsupportedVrStereoMode"
        case unsupportedsphericalprojectiontype = "unsupportedSphericalProjectionType"
        case unsupportedhdrpixelformat = "unsupportedHdrPixelFormat"
        case unsupportedhdrcolormetadata = "unsupportedHdrColorMetadata"
        case problematichdrlookuptable = "problematicHdrLookupTable"
    }
    /** A list of video editing operations that might improve the video quality or playback experience of the uploaded video. */
    public var editorSuggestions: [EditorSuggestions]?
    /** A list of errors that will prevent YouTube from successfully processing the uploaded video video. These errors indicate that, regardless of the video&#39;s current processing status, eventually, that status will almost certainly be failed. */
    public var processingErrors: [ProcessingErrors]?
    /** A list of suggestions that may improve YouTube&#39;s ability to process the video. */
    public var processingHints: [ProcessingHints]?
    /** A list of reasons why YouTube may have difficulty transcoding the uploaded video or that might result in an erroneous transcoding. These warnings are generated before YouTube actually processes the uploaded video file. In addition, they identify issues that are unlikely to cause the video processing to fail but that might cause problems such as sync issues, video artifacts, or a missing audio track. */
    public var processingWarnings: [ProcessingWarnings]?
    /** A list of keyword tags that could be added to the video&#39;s metadata to increase the likelihood that users will locate your video when searching or browsing on YouTube. */
    public var tagSuggestions: [VideoSuggestionsTagSuggestion]?

    public init(editorSuggestions: [EditorSuggestions]? = nil, processingErrors: [ProcessingErrors]? = nil, processingHints: [ProcessingHints]? = nil, processingWarnings: [ProcessingWarnings]? = nil, tagSuggestions: [VideoSuggestionsTagSuggestion]? = nil) {
        self.editorSuggestions = editorSuggestions
        self.processingErrors = processingErrors
        self.processingHints = processingHints
        self.processingWarnings = processingWarnings
        self.tagSuggestions = tagSuggestions
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case editorSuggestions
        case processingErrors
        case processingHints
        case processingWarnings
        case tagSuggestions
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(editorSuggestions, forKey: .editorSuggestions)
        try container.encodeIfPresent(processingErrors, forKey: .processingErrors)
        try container.encodeIfPresent(processingHints, forKey: .processingHints)
        try container.encodeIfPresent(processingWarnings, forKey: .processingWarnings)
        try container.encodeIfPresent(tagSuggestions, forKey: .tagSuggestions)
    }



}
