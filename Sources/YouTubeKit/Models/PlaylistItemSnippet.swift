//
// PlaylistItemSnippet.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

/** Basic details about a playlist, including title, description and thumbnails. Basic details of a YouTube Playlist item provided by the author. Next ID: 15 */
public struct PlaylistItemSnippet: Codable, Hashable {

    /** The ID that YouTube uses to uniquely identify the user that added the item to the playlist. */
    public var channelId: String?
    /** Channel title for the channel that the playlist item belongs to. */
    public var channelTitle: String?
    /** The item&#39;s description. */
    public var description: String?
    /** The ID that YouTube uses to uniquely identify thGe playlist that the playlist item is in. */
    public var playlistId: String?
    /** The order in which the item appears in the playlist. The value uses a zero-based index, so the first item has a position of 0, the second item has a position of 1, and so forth. */
    public var position: Int?
    /** The date and time that the item was added to the playlist. */
    public var publishedAt: Date?
    public var resourceId: ResourceId?
    public var thumbnails: ThumbnailDetails?
    /** The item&#39;s title. */
    public var title: String?
    /** Channel id for the channel this video belongs to. */
    public var videoOwnerChannelId: String?
    /** Channel title for the channel this video belongs to. */
    public var videoOwnerChannelTitle: String?

    public init(channelId: String? = nil, channelTitle: String? = nil, description: String? = nil, playlistId: String? = nil, position: Int? = nil, publishedAt: Date? = nil, resourceId: ResourceId? = nil, thumbnails: ThumbnailDetails? = nil, title: String? = nil, videoOwnerChannelId: String? = nil, videoOwnerChannelTitle: String? = nil) {
        self.channelId = channelId
        self.channelTitle = channelTitle
        self.description = description
        self.playlistId = playlistId
        self.position = position
        self.publishedAt = publishedAt
        self.resourceId = resourceId
        self.thumbnails = thumbnails
        self.title = title
        self.videoOwnerChannelId = videoOwnerChannelId
        self.videoOwnerChannelTitle = videoOwnerChannelTitle
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case channelId
        case channelTitle
        case description
        case playlistId
        case position
        case publishedAt
        case resourceId
        case thumbnails
        case title
        case videoOwnerChannelId
        case videoOwnerChannelTitle
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(channelId, forKey: .channelId)
        try container.encodeIfPresent(channelTitle, forKey: .channelTitle)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(playlistId, forKey: .playlistId)
        try container.encodeIfPresent(position, forKey: .position)
        try container.encodeIfPresent(publishedAt, forKey: .publishedAt)
        try container.encodeIfPresent(resourceId, forKey: .resourceId)
        try container.encodeIfPresent(thumbnails, forKey: .thumbnails)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(videoOwnerChannelId, forKey: .videoOwnerChannelId)
        try container.encodeIfPresent(videoOwnerChannelTitle, forKey: .videoOwnerChannelTitle)
    }



}
