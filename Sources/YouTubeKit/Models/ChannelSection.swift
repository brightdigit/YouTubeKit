//
// ChannelSection.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct ChannelSection: Codable, Hashable {

    public var contentDetails: ChannelSectionContentDetails?
    /** Etag of this resource. */
    public var etag: String?
    /** The ID that YouTube uses to uniquely identify the channel section. */
    public var id: String?
    /** Identifies what kind of resource this is. Value: the fixed string \&quot;youtube#channelSection\&quot;. */
    public var kind: String? = "youtube#channelSection"
    /** Localizations for different languages */
    public var localizations: [String: ChannelSectionLocalization]?
    public var snippet: ChannelSectionSnippet?
    public var targeting: ChannelSectionTargeting?

    public init(contentDetails: ChannelSectionContentDetails? = nil, etag: String? = nil, id: String? = nil, kind: String? = "youtube#channelSection", localizations: [String: ChannelSectionLocalization]? = nil, snippet: ChannelSectionSnippet? = nil, targeting: ChannelSectionTargeting? = nil) {
        self.contentDetails = contentDetails
        self.etag = etag
        self.id = id
        self.kind = kind
        self.localizations = localizations
        self.snippet = snippet
        self.targeting = targeting
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case contentDetails
        case etag
        case id
        case kind
        case localizations
        case snippet
        case targeting
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(contentDetails, forKey: .contentDetails)
        try container.encodeIfPresent(etag, forKey: .etag)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(kind, forKey: .kind)
        try container.encodeIfPresent(localizations, forKey: .localizations)
        try container.encodeIfPresent(snippet, forKey: .snippet)
        try container.encodeIfPresent(targeting, forKey: .targeting)
    }



}
