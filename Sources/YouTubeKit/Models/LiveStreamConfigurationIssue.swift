//
// LiveStreamConfigurationIssue.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct LiveStreamConfigurationIssue: Codable, Hashable {

    public enum Severity: String, Codable, CaseIterable {
        case info = "info"
        case warning = "warning"
        case error = "error"
    }
    public enum ModelType: String, Codable, CaseIterable {
        case gopsizeover = "gopSizeOver"
        case gopsizelong = "gopSizeLong"
        case gopsizeshort = "gopSizeShort"
        case opengop = "openGop"
        case badcontainer = "badContainer"
        case audiobitratehigh = "audioBitrateHigh"
        case audiobitratelow = "audioBitrateLow"
        case audiosamplerate = "audioSampleRate"
        case bitratehigh = "bitrateHigh"
        case bitratelow = "bitrateLow"
        case audiocodec = "audioCodec"
        case videocodec = "videoCodec"
        case noaudiostream = "noAudioStream"
        case novideostream = "noVideoStream"
        case multiplevideostreams = "multipleVideoStreams"
        case multipleaudiostreams = "multipleAudioStreams"
        case audiotoomanychannels = "audioTooManyChannels"
        case interlacedvideo = "interlacedVideo"
        case frameratehigh = "frameRateHigh"
        case resolutionmismatch = "resolutionMismatch"
        case videocodecmismatch = "videoCodecMismatch"
        case videointerlacemismatch = "videoInterlaceMismatch"
        case videoprofilemismatch = "videoProfileMismatch"
        case videobitratemismatch = "videoBitrateMismatch"
        case frameratemismatch = "framerateMismatch"
        case gopmismatch = "gopMismatch"
        case audiosampleratemismatch = "audioSampleRateMismatch"
        case audiostereomismatch = "audioStereoMismatch"
        case audiocodecmismatch = "audioCodecMismatch"
        case audiobitratemismatch = "audioBitrateMismatch"
        case videoresolutionsuboptimal = "videoResolutionSuboptimal"
        case videoresolutionunsupported = "videoResolutionUnsupported"
        case videoingestionstarved = "videoIngestionStarved"
        case videoingestionfasterthanrealtime = "videoIngestionFasterThanRealtime"
    }
    /** The long-form description of the issue and how to resolve it. */
    public var description: String?
    /** The short-form reason for this issue. */
    public var reason: String?
    /** How severe this issue is to the stream. */
    public var severity: Severity?
    /** The kind of error happening. */
    public var type: ModelType?

    public init(description: String? = nil, reason: String? = nil, severity: Severity? = nil, type: ModelType? = nil) {
        self.description = description
        self.reason = reason
        self.severity = severity
        self.type = type
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case description
        case reason
        case severity
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(reason, forKey: .reason)
        try container.encodeIfPresent(severity, forKey: .severity)
        try container.encodeIfPresent(type, forKey: .type)
    }



}
