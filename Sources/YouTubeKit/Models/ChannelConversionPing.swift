//
// ChannelConversionPing.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

/** Pings that the app shall fire (authenticated by biscotti cookie). Each ping has a context, in which the app must fire the ping, and a url identifying the ping. */
public struct ChannelConversionPing: Codable, Hashable {

    public enum Context: String, Codable, CaseIterable {
        case subscribe = "subscribe"
        case unsubscribe = "unsubscribe"
        case cview = "cview"
    }
    /** Defines the context of the ping. */
    public var context: Context?
    /** The url (without the schema) that the player shall send the ping to. It&#39;s at caller&#39;s descretion to decide which schema to use (http vs https) Example of a returned url: //googleads.g.doubleclick.net/pagead/ viewthroughconversion/962985656/?data&#x3D;path%3DtHe_path%3Btype%3D cview%3Butuid%3DGISQtTNGYqaYl4sKxoVvKA&amp;labe&#x3D;default The caller must append biscotti authentication (ms param in case of mobile, for example) to this ping. */
    public var conversionUrl: String?

    public init(context: Context? = nil, conversionUrl: String? = nil) {
        self.context = context
        self.conversionUrl = conversionUrl
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case context
        case conversionUrl
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(context, forKey: .context)
        try container.encodeIfPresent(conversionUrl, forKey: .conversionUrl)
    }



}
