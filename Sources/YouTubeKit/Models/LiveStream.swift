//
// LiveStream.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

/** A live stream describes a live ingestion point. */
public struct LiveStream: Codable, Hashable {

    public var cdn: CdnSettings?
    public var contentDetails: LiveStreamContentDetails?
    /** Etag of this resource. */
    public var etag: String?
    /** The ID that YouTube assigns to uniquely identify the stream. */
    public var id: String?
    /** Identifies what kind of resource this is. Value: the fixed string \&quot;youtube#liveStream\&quot;. */
    public var kind: String? = "youtube#liveStream"
    public var snippet: LiveStreamSnippet?
    public var status: LiveStreamStatus?

    public init(cdn: CdnSettings? = nil, contentDetails: LiveStreamContentDetails? = nil, etag: String? = nil, id: String? = nil, kind: String? = "youtube#liveStream", snippet: LiveStreamSnippet? = nil, status: LiveStreamStatus? = nil) {
        self.cdn = cdn
        self.contentDetails = contentDetails
        self.etag = etag
        self.id = id
        self.kind = kind
        self.snippet = snippet
        self.status = status
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case cdn
        case contentDetails
        case etag
        case id
        case kind
        case snippet
        case status
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(cdn, forKey: .cdn)
        try container.encodeIfPresent(contentDetails, forKey: .contentDetails)
        try container.encodeIfPresent(etag, forKey: .etag)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(kind, forKey: .kind)
        try container.encodeIfPresent(snippet, forKey: .snippet)
        try container.encodeIfPresent(status, forKey: .status)
    }



}
