//
// Video.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

/** A *video* resource represents a YouTube video. */
public struct Video: Codable, Hashable {

    public var ageGating: VideoAgeGating?
    public var contentDetails: VideoContentDetails?
    /** Etag of this resource. */
    public var etag: String?
    public var fileDetails: VideoFileDetails?
    /** The ID that YouTube uses to uniquely identify the video. */
    public var id: String?
    /** Identifies what kind of resource this is. Value: the fixed string \&quot;youtube#video\&quot;. */
    public var kind: String? = "youtube#video"
    public var liveStreamingDetails: VideoLiveStreamingDetails?
    /** The localizations object contains localized versions of the basic details about the video, such as its title and description. */
    public var localizations: [String: VideoLocalization]?
    public var monetizationDetails: VideoMonetizationDetails?
    public var player: VideoPlayer?
    public var processingDetails: VideoProcessingDetails?
    /** DEPRECATED. b/157517979: This part was never populated after it was added. However, it sees non-zero traffic because there is generated client code in the wild that refers to it [1]. We keep this field and do NOT remove it because otherwise V3 would return an error when this part gets requested [2]. [1] https://developers.google.com/resources/api-libraries/documentation/youtube/v3/csharp/latest/classGoogle_1_1Apis_1_1YouTube_1_1v3_1_1Data_1_1VideoProjectDetails.html [2] http://google3/video/youtube/src/python/servers/data_api/common.py?l&#x3D;1565-1569&amp;rcl&#x3D;344141677 */
    public var projectDetails: AnyCodable?
    public var recordingDetails: VideoRecordingDetails?
    public var snippet: VideoSnippet?
    public var statistics: VideoStatistics?
    public var status: VideoStatus?
    public var suggestions: VideoSuggestions?
    public var topicDetails: VideoTopicDetails?

    public init(ageGating: VideoAgeGating? = nil, contentDetails: VideoContentDetails? = nil, etag: String? = nil, fileDetails: VideoFileDetails? = nil, id: String? = nil, kind: String? = "youtube#video", liveStreamingDetails: VideoLiveStreamingDetails? = nil, localizations: [String: VideoLocalization]? = nil, monetizationDetails: VideoMonetizationDetails? = nil, player: VideoPlayer? = nil, processingDetails: VideoProcessingDetails? = nil, projectDetails: AnyCodable? = nil, recordingDetails: VideoRecordingDetails? = nil, snippet: VideoSnippet? = nil, statistics: VideoStatistics? = nil, status: VideoStatus? = nil, suggestions: VideoSuggestions? = nil, topicDetails: VideoTopicDetails? = nil) {
        self.ageGating = ageGating
        self.contentDetails = contentDetails
        self.etag = etag
        self.fileDetails = fileDetails
        self.id = id
        self.kind = kind
        self.liveStreamingDetails = liveStreamingDetails
        self.localizations = localizations
        self.monetizationDetails = monetizationDetails
        self.player = player
        self.processingDetails = processingDetails
        self.projectDetails = projectDetails
        self.recordingDetails = recordingDetails
        self.snippet = snippet
        self.statistics = statistics
        self.status = status
        self.suggestions = suggestions
        self.topicDetails = topicDetails
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case ageGating
        case contentDetails
        case etag
        case fileDetails
        case id
        case kind
        case liveStreamingDetails
        case localizations
        case monetizationDetails
        case player
        case processingDetails
        case projectDetails
        case recordingDetails
        case snippet
        case statistics
        case status
        case suggestions
        case topicDetails
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(ageGating, forKey: .ageGating)
        try container.encodeIfPresent(contentDetails, forKey: .contentDetails)
        try container.encodeIfPresent(etag, forKey: .etag)
        try container.encodeIfPresent(fileDetails, forKey: .fileDetails)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(kind, forKey: .kind)
        try container.encodeIfPresent(liveStreamingDetails, forKey: .liveStreamingDetails)
        try container.encodeIfPresent(localizations, forKey: .localizations)
        try container.encodeIfPresent(monetizationDetails, forKey: .monetizationDetails)
        try container.encodeIfPresent(player, forKey: .player)
        try container.encodeIfPresent(processingDetails, forKey: .processingDetails)
        try container.encodeIfPresent(projectDetails, forKey: .projectDetails)
        try container.encodeIfPresent(recordingDetails, forKey: .recordingDetails)
        try container.encodeIfPresent(snippet, forKey: .snippet)
        try container.encodeIfPresent(statistics, forKey: .statistics)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(suggestions, forKey: .suggestions)
        try container.encodeIfPresent(topicDetails, forKey: .topicDetails)
    }



}
