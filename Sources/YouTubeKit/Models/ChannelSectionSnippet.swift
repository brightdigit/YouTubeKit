//
// ChannelSectionSnippet.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

/** Basic details about a channel section, including title, style and position. */
public struct ChannelSectionSnippet: Codable, Hashable {

    public enum Style: String, Codable, CaseIterable {
        case channelsectionstyleunspecified = "channelsectionStyleUnspecified"
        case horizontalrow = "horizontalRow"
        case verticallist = "verticalList"
    }
    public enum ModelType: String, Codable, CaseIterable {
        case channelsectiontypeundefined = "channelsectionTypeUndefined"
        case singleplaylist = "singlePlaylist"
        case multipleplaylists = "multiplePlaylists"
        case popularuploads = "popularUploads"
        case recentuploads = "recentUploads"
        case likes = "likes"
        case allplaylists = "allPlaylists"
        case likedplaylists = "likedPlaylists"
        case recentposts = "recentPosts"
        case recentactivity = "recentActivity"
        case liveevents = "liveEvents"
        case upcomingevents = "upcomingEvents"
        case completedevents = "completedEvents"
        case multiplechannels = "multipleChannels"
        case postedvideos = "postedVideos"
        case postedplaylists = "postedPlaylists"
        case subscriptions = "subscriptions"
    }
    /** The ID that YouTube uses to uniquely identify the channel that published the channel section. */
    public var channelId: String?
    /** The language of the channel section&#39;s default title and description. */
    public var defaultLanguage: String?
    public var localized: ChannelSectionLocalization?
    /** The position of the channel section in the channel. */
    public var position: Int?
    /** The style of the channel section. */
    public var style: Style?
    /** The channel section&#39;s title for multiple_playlists and multiple_channels. */
    public var title: String?
    /** The type of the channel section. */
    public var type: ModelType?

    public init(channelId: String? = nil, defaultLanguage: String? = nil, localized: ChannelSectionLocalization? = nil, position: Int? = nil, style: Style? = nil, title: String? = nil, type: ModelType? = nil) {
        self.channelId = channelId
        self.defaultLanguage = defaultLanguage
        self.localized = localized
        self.position = position
        self.style = style
        self.title = title
        self.type = type
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case channelId
        case defaultLanguage
        case localized
        case position
        case style
        case title
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(channelId, forKey: .channelId)
        try container.encodeIfPresent(defaultLanguage, forKey: .defaultLanguage)
        try container.encodeIfPresent(localized, forKey: .localized)
        try container.encodeIfPresent(position, forKey: .position)
        try container.encodeIfPresent(style, forKey: .style)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(type, forKey: .type)
    }



}
