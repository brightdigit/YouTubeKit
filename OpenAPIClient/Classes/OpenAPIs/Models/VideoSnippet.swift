//
// VideoSnippet.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

/** Basic details about a video, including title, description, uploader, thumbnails and category. */
public struct VideoSnippet: Codable, Hashable {

    public enum LiveBroadcastContent: String, Codable, CaseIterable {
        case _none = "none"
        case upcoming = "upcoming"
        case live = "live"
        case completed = "completed"
    }
    /** The YouTube video category associated with the video. */
    public var categoryId: String?
    /** The ID that YouTube uses to uniquely identify the channel that the video was uploaded to. */
    public var channelId: String?
    /** Channel title for the channel that the video belongs to. */
    public var channelTitle: String?
    /** The default_audio_language property specifies the language spoken in the video&#39;s default audio track. */
    public var defaultAudioLanguage: String?
    /** The language of the videos&#39;s default snippet. */
    public var defaultLanguage: String?
    /** The video&#39;s description. @mutable youtube.videos.insert youtube.videos.update */
    public var description: String?
    /** Indicates if the video is an upcoming/active live broadcast. Or it&#39;s \&quot;none\&quot; if the video is not an upcoming/active live broadcast. */
    public var liveBroadcastContent: LiveBroadcastContent?
    public var localized: VideoLocalization?
    /** The date and time when the video was uploaded. */
    public var publishedAt: Date?
    /** A list of keyword tags associated with the video. Tags may contain spaces. */
    public var tags: [String]?
    public var thumbnails: ThumbnailDetails?
    /** The video&#39;s title. @mutable youtube.videos.insert youtube.videos.update */
    public var title: String?

    public init(categoryId: String? = nil, channelId: String? = nil, channelTitle: String? = nil, defaultAudioLanguage: String? = nil, defaultLanguage: String? = nil, description: String? = nil, liveBroadcastContent: LiveBroadcastContent? = nil, localized: VideoLocalization? = nil, publishedAt: Date? = nil, tags: [String]? = nil, thumbnails: ThumbnailDetails? = nil, title: String? = nil) {
        self.categoryId = categoryId
        self.channelId = channelId
        self.channelTitle = channelTitle
        self.defaultAudioLanguage = defaultAudioLanguage
        self.defaultLanguage = defaultLanguage
        self.description = description
        self.liveBroadcastContent = liveBroadcastContent
        self.localized = localized
        self.publishedAt = publishedAt
        self.tags = tags
        self.thumbnails = thumbnails
        self.title = title
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case categoryId
        case channelId
        case channelTitle
        case defaultAudioLanguage
        case defaultLanguage
        case description
        case liveBroadcastContent
        case localized
        case publishedAt
        case tags
        case thumbnails
        case title
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(categoryId, forKey: .categoryId)
        try container.encodeIfPresent(channelId, forKey: .channelId)
        try container.encodeIfPresent(channelTitle, forKey: .channelTitle)
        try container.encodeIfPresent(defaultAudioLanguage, forKey: .defaultAudioLanguage)
        try container.encodeIfPresent(defaultLanguage, forKey: .defaultLanguage)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(liveBroadcastContent, forKey: .liveBroadcastContent)
        try container.encodeIfPresent(localized, forKey: .localized)
        try container.encodeIfPresent(publishedAt, forKey: .publishedAt)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(thumbnails, forKey: .thumbnails)
        try container.encodeIfPresent(title, forKey: .title)
    }



}
