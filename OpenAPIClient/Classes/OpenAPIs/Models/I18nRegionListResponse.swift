//
// I18nRegionListResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct I18nRegionListResponse: Codable, Hashable {

    /** Etag of this resource. */
    public var etag: String?
    /** Serialized EventId of the request which produced this response. */
    public var eventId: String?
    /** A list of regions where YouTube is available. In this map, the i18n region ID is the map key, and its value is the corresponding i18nRegion resource. */
    public var items: [I18nRegion]?
    /** Identifies what kind of resource this is. Value: the fixed string \&quot;youtube#i18nRegionListResponse\&quot;. */
    public var kind: String? = "youtube#i18nRegionListResponse"
    /** The visitorId identifies the visitor. */
    public var visitorId: String?

    public init(etag: String? = nil, eventId: String? = nil, items: [I18nRegion]? = nil, kind: String? = "youtube#i18nRegionListResponse", visitorId: String? = nil) {
        self.etag = etag
        self.eventId = eventId
        self.items = items
        self.kind = kind
        self.visitorId = visitorId
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case etag
        case eventId
        case items
        case kind
        case visitorId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(etag, forKey: .etag)
        try container.encodeIfPresent(eventId, forKey: .eventId)
        try container.encodeIfPresent(items, forKey: .items)
        try container.encodeIfPresent(kind, forKey: .kind)
        try container.encodeIfPresent(visitorId, forKey: .visitorId)
    }



}
