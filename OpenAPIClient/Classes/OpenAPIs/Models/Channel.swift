//
// Channel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

/** A *channel* resource contains information about a YouTube channel. */
public struct Channel: Codable, Hashable {

    public var auditDetails: ChannelAuditDetails?
    public var brandingSettings: ChannelBrandingSettings?
    public var contentDetails: ChannelContentDetails?
    public var contentOwnerDetails: ChannelContentOwnerDetails?
    public var conversionPings: ChannelConversionPings?
    /** Etag of this resource. */
    public var etag: String?
    /** The ID that YouTube uses to uniquely identify the channel. */
    public var id: String?
    /** Identifies what kind of resource this is. Value: the fixed string \&quot;youtube#channel\&quot;. */
    public var kind: String? = "youtube#channel"
    /** Localizations for different languages */
    public var localizations: [String: ChannelLocalization]?
    public var snippet: ChannelSnippet?
    public var statistics: ChannelStatistics?
    public var status: ChannelStatus?
    public var topicDetails: ChannelTopicDetails?

    public init(auditDetails: ChannelAuditDetails? = nil, brandingSettings: ChannelBrandingSettings? = nil, contentDetails: ChannelContentDetails? = nil, contentOwnerDetails: ChannelContentOwnerDetails? = nil, conversionPings: ChannelConversionPings? = nil, etag: String? = nil, id: String? = nil, kind: String? = "youtube#channel", localizations: [String: ChannelLocalization]? = nil, snippet: ChannelSnippet? = nil, statistics: ChannelStatistics? = nil, status: ChannelStatus? = nil, topicDetails: ChannelTopicDetails? = nil) {
        self.auditDetails = auditDetails
        self.brandingSettings = brandingSettings
        self.contentDetails = contentDetails
        self.contentOwnerDetails = contentOwnerDetails
        self.conversionPings = conversionPings
        self.etag = etag
        self.id = id
        self.kind = kind
        self.localizations = localizations
        self.snippet = snippet
        self.statistics = statistics
        self.status = status
        self.topicDetails = topicDetails
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case auditDetails
        case brandingSettings
        case contentDetails
        case contentOwnerDetails
        case conversionPings
        case etag
        case id
        case kind
        case localizations
        case snippet
        case statistics
        case status
        case topicDetails
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(auditDetails, forKey: .auditDetails)
        try container.encodeIfPresent(brandingSettings, forKey: .brandingSettings)
        try container.encodeIfPresent(contentDetails, forKey: .contentDetails)
        try container.encodeIfPresent(contentOwnerDetails, forKey: .contentOwnerDetails)
        try container.encodeIfPresent(conversionPings, forKey: .conversionPings)
        try container.encodeIfPresent(etag, forKey: .etag)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(kind, forKey: .kind)
        try container.encodeIfPresent(localizations, forKey: .localizations)
        try container.encodeIfPresent(snippet, forKey: .snippet)
        try container.encodeIfPresent(statistics, forKey: .statistics)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(topicDetails, forKey: .topicDetails)
    }



}
